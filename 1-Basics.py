########################################################################################################################
#
# № 3 - Основные конструкции языка
#
# Реализуйте функцию binary, которая возвращает двоичное представление десятичного числа в виде строки.
# Алгоритм
#
# Перевод числа из десятичной системы в двоичную делается по следующему алгоритму:
#
#     Исходное число (number) делится пополам.
#     Остаток от деления (modulo) записывается в начало строки (result).
#     Исходным числом становится число полученное по формуле: number // 2.
#     Если исходное число (number) больше нуля, то повторяем с первого пункта.
#     Если исходное число равно нулю, то возвращаем (result).
#
# 10 / 2  5 0
#  5 / 2  2 1
#  2 / 2  1 0
#           1
# -> 1010
#
# Примеры
#
# binary(0)  # '0'
# binary(1)  # '1'
# binary(5)  # '101'
#
# Подсказки
#
#     Перед добавлением в строку числа нужно превратить в строки str(modulo)
#
# SOLUTION:

# BEGIN (write your solution here)


def binary(number) -> str:
    """
    :return: str
    """
    result = ''
    if number == 0:
        return '0'
    while number > 0:
        result = str(number % 2) + result
        number = number // 2
    return result

# END

#
########################################################################################################################
#
# № 7 - Пакеты
#
#
# src/package/__init__.py
#
# Дан пакет следующей структуры:
#
# $ tree package
# package/
# ├── __init__.py
# ├── functions.py
# └── names.py
#
# Добавьте в __init__.py константу GREETING, которая должна содержать результат применения функции greet
# к константе NAME (и та, и другая импортируются из модулей пакета в блоке импортов модуля __init__.py)
#
# SOLUTION

from package.functions import greet
from package.names import NAME

# BEGIN (write your solution here)
GREETING = greet(NAME)
# END

#
########################################################################################################################
#
# № 10 - Кортежи
#
#
# src/solution.py
#
# Реализуйте функцию sort_pair, которая принимает пару (кортеж из двух значений) и возвращает пару, значения которой
# расположенны строго в порядке возрастания
#
# Пример:
#
# обратите внимание на скобки у аргумента функции
# sort_pair((5, 1)) == (1, 5)
# sort_pair((2, 2)) == (2, 2)
# sort_pair((7, 8)) == (7, 8)
#
# SOLUTION:

# BEGIN (write your solution here)


def sort_pair(pair):
    a, b = pair
    if a > b:
        return (b, a)
    return pair

# END

#
########################################################################################################################
